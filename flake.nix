{
  inputs.nixpkgs.url = github:NixOS/nixpkgs/3ae365af; # 2023-01-14
#  inputs.home-manager.url = github:nix-community/home-manager;

  outputs = { self, nixpkgs, ... }:
    let
      settings-i915 = { pkgs, ... }: {
        # we need linux 5.19+ for sound support, but with 5.19.8 at least;
        # the i915 crashes the display
        boot.kernelPackages = pkgs.linuxKernel.packages.linux_6_1;
        # https://wiki.archlinux.org/title/Dell_XPS_13_(9310)#Random_Hangs_on_i915_with_kernel
        # Random Hangs on i915 with kernel
        #
        #   Occasionally the laptop hangs when running the i915 Linux
        #   driver.
        #   This results in an occasional visual delay to keyboard inputs
        #   and makes the system appear to be crashing.
        #
        # The bug report for this issue can be found here:
        # https://gitlab.freedesktop.org/drm/intel/-/issues/3496
        #
        # Set panel self refresh to off in the kernel parameters:
        # i915.enable_psr=0 i915.enable_fbc=1.
        boot.kernelParams = [ "i915.enable_psr=0" "i915.enable_fbc=1" ];
      };

      settings-std = { hostname, domainname, etherMac, stateVersion
                     , logicalCores, boot ? ./boot/efi.nix
                     , sshPubKey ? ./sshkeys + "/${hostname}.pub"
                     }:
        let
          filesystems = [ ./filesystems/std.nix ];
        in
          { lib, ... } : {
            # Every once in a while, a new NixOS release may change
            # configuration defaults in a way incompatible with stateful
            # data. For instance, if the default version of PostgreSQL changes,
            # the new version will probably be unable to read your existing
            # databases. To prevent such breakage, you should set the value of
            # this option to the NixOS release with which you want to be
            # compatible. The effect is that NixOS will use defaults
            # corresponding to the specified release (such as using an older
            # version of PostgreSQL). Itâ€˜s perfectly fine and recommended to
            # leave this value at the release version of the first install of
            # this system. Changing this option will not upgrade your system. In
            # fact it is meant to stay constant exactly when you upgrade your
            # system. You should only bump this option, if you are sure that you
            # can or have migrated all state on your system which is affected by
            # this option.
            system.stateVersion = stateVersion;

            # This option defines the maximum number of jobs that Nix will try
            # to build in parallel. The default is auto, which means it will use
            # all available logical cores. It is recommend to set it to the
            # total number of logical cores in your system (e.g., 16 for two
            # CPUs with 4 cores each and hyper-threading).
            nix.settings.max-jobs = lib.mkDefault logicalCores;

            # from nixpkgs/nixos/modules/installer/scan/not-detected.nix
            # Enables non-free firmware on devices not recognized by
            # `nixos-generate-config`.
            hardware.enableRedistributableFirmware = lib.mkDefault true;

            networking.hostName = hostname;
            networking.extraHosts =
              "127.0.0.1 " + hostname + "." + domainname + " " + hostname;
            # note that this won't effect until ethernet is actually connected
            # generated by `hex-addr red.sixears.co.uk`
            networking.networkmanager.ethernet.macAddress = etherMac;

            boot.initrd.availableKernelModules = [ "xhci_pci" "usb_storage"
                                                   "sd_mod" ];

            programs.ssh.knownHosts =
              { "localhost" = { publicKeyFile = sshPubKey; }; };

            # create a symlink to /etc/X11/xorg.conf for visibility
            services.xserver.exportConfiguration = true;

            imports = [ boot ] ++ filesystems;
        };

      settings-wifi = { wifiMac }: { ... }: {
        # note that this won't effect until wifi is actually connected
        networking.networkmanager.wifi.macAddress = wifiMac;
      };

      settings-nvme0 = { ... }: {
        services.smartd.devices =
          [ { device="/dev/nvme0"; options = "-d nvme -W 0,70,75"; } ];

        boot.initrd.availableKernelModules = [ "nvme" ];
      };

      settings-intel = { ... }: {
        boot.kernelModules = [ "kvm-intel" ];
      };

      settings-laptop = { ... }: {
        powerManagement.cpuFreqGovernor = "powersave";
      };

      settingses-dell-xps-13-9310 =
        [ settings-i915 settings-intel settings-laptop settings-nvme0 ];

      dell-xps-13-9310 = { hostname, domainname, stateVersion, logicalCores
                         , etherMac, wifiMac }:
        settingses-dell-xps-13-9310 ++ [
          (settings-wifi { inherit wifiMac; })
          (settings-std  { inherit hostname domainname etherMac stateVersion
                                   logicalCores; })
        ];

      nixos-system = { modules, system ? "x86_64-linux" }:
        nixpkgs.lib.nixosSystem { inherit system modules; };
    in {
      nixosConfigurations = {
        red =
          nixos-system {
            modules =
              (dell-xps-13-9310 {
                hostname     = "red";
                domainname   = "sixears.co.uk";
                logicalCores = 12;
                etherMac     = "72:65:64:2e:73:69";
                wifiMac      = "Dell XPS 9315 Laptop Wireless";
                stateVersion = "22.05";
              });
          };
      };
    };
}

#X# { config ? import ./nullcfg.nix, lib, options, modulesPath, pkgs, specialArgs ? {} }:
#X#   {
#X#     environment.systemPackages = with pkgs; [ mkopenvpnconfs wifi ];
#X#
#X#     imports =
#X#       [ ../std.nix
#X#         ../versions/unstable.nix
#X#
#X#         ../filesystems/efi.nix
#X#         ../filesystems/mobile-music.nix
#X#         ../filesystems/local.nix
#X#         ../filesystems/usb-sda.nix
#X#
#X#         ../xserver.nix
#X#         ../xserver-dvorak.nix
#X#         ../xserver-intel.nix
#X#
#X#         ../desktop.nix
#X#         ../printing.nix
#X#         ../scanning.nix
#X#         ../finbar.nix
#X#
#X# #        ../containers-podcaster.nix
#X#         ../keyboardio.nix
#X# #        ../bluetooth.nix
#X#
#X#         ../laptop.nix
#X#         ../pulseaudio.nix
#X#
#X#         ../dkill.nix
#X#         ../openvpn.nix
#X# #        ../tmpwww.nix
#X# #        ../virtualbox.nix
#X#         ../nix-serve.nix
#X#
#X#
#X# #        ../docker.nix
#X#
#X#         ../local-home-backup.nix
#X#         ../users/people/martyn.nix
#X#         ../users/people/syncthing-martyn.nix
#X#
#X#         ../nix-serve.nix
#X#
#X# ../dns-server-cloudflare.nix
#X#
#X#         ../fwupd.nix
#X#       ];
#X#
#X#     fileSystems =
#X#       {
#X#         "/mnt/sdcard" =
#X#           {
#X#             device = "/dev/disk/by-path/pci-0000:39:00.0-usb-0:1.4:1.0-scsi-0:0:0:1-part1";
#X#             options = [ "user" "utf8" "umask=000" "noauto" "exec" "sync" ];
#X#           };
#X#       };
#X#
#X#
#X#     # SoundWire
#X# #    networking.firewall.allowedUDPPorts = [ 59010 59011 ];
#X#
#X#     # enable the CFSSL CA api-server.
#X#     services.cfssl.enable = true;
#X#     services.cfssl.port   = 59998;
#X#   }
#X#
