{-# OPTIONS_GHC -Wall #-}

{-# LANGUAGE NoImplicitPrelude    #-}
{-# LANGUAGE RankNTypes           #-}
{-# LANGUAGE ScopedTypeVariables  #-}
{-# LANGUAGE UnicodeSyntax        #-}
{-# LANGUAGE ViewPatterns         #-}

import Base1

-- fpath -------------------------------

import FPath.AbsFile           ( AbsFile, absfile )
import FPath.Error.FPathError  ( AsFPathError )
import FPath.File              ( File( FileA ) )
import FPath.Parseable         ( readM )

-- log-plus ----------------------------

import Log  ( Log )

-- logging-effect ----------------------

import Control.Monad.Log  ( LoggingT, Severity( Informational ) )

-- mockio-log --------------------------

import MockIO.Log          ( DoMock )
import MockIO.MockIOClass  ( MockIOClass )

-- mockio-plus -------------------------

import MockIO.File  ( fileFoldLinesUTF8 )

-- monadio-plus ------------------------

import MonadIO        ( say )
import MonadIO.Base   ( getArgs )
import MonadIO.FPath  ( pResolve )

-- optparse-applicative ----------------

import Options.Applicative.Builder  ( argument, metavar )
import Options.Applicative.Types    ( Parser )

-- stdmain -----------------------------

import StdMain             ( stdMain )
import StdMain.UsageError  ( UsageParseFPProcIOError )

--------------------------------------------------------------------------------

newtype Options = Options { _input_files ‚à∑ [File] }

parseOptions ‚à∑ Parser Options
parseOptions = Options ‚ä≥ many (argument readM (metavar "INPUT-FILE"))

----------------------------------------

inputFiles ‚à∑ Options ‚Üí NonEmpty File
inputFiles (_input_files ‚Üí []) = FileA [absfile|/dev/stdin|] :| []
inputFiles (_input_files ‚Üí xs) = fromList xs

----------------------------------------

myMain ‚à∑ ‚àÄ Œµ . (HasCallStack, Printable Œµ, AsIOError Œµ, AsFPathError Œµ) ‚áí
         DoMock ‚Üí Options ‚Üí LoggingT (Log MockIOClass) (ExceptT Œµ IO) Word8
myMain do_mock opts = do
  let files = inputFiles opts
  forM_ files $ \ fn ‚Üí do
    fn' ‚Üê pResolve @AbsFile fn
    fileFoldLinesUTF8 Informational ùïπ [] (\ _ t ‚Üí say t ‚™º return [])
                      (return []) fn' do_mock
  return 0

----------------------------------------

main ‚à∑ IO ()
main = do
  let progDesc ‚à∑ ùïã = "cat files"
  getArgs ‚â´ stdMain progDesc parseOptions (myMain @UsageParseFPProcIOError)

-- that's all, folks! ----------------------------------------------------------
